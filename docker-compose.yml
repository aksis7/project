version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: wb-zookeeper-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - wb
    healthcheck:
      disable: true


  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: wb-kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: wb-zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://wb-kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
        #condition: service_healthy
    networks:
      - wb
    healthcheck:
      disable: true

  postgres:
    image: postgres:13
    container_name: wb-postgres-1
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s

  redis:
    image: redis:alpine
    container_name: wb-redis-1
    ports:
      - "6379:6379"
    networks:
      - wb
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s

  go_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wb-go-service
    depends_on:
      
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
      POSTGRES_HOST: wb-postgres-1
      KAFKA_BROKER: wb-kafka-1:9092
      REDIS_HOST: wb-redis-1
    networks:
      - wb
    volumes:
      - ./static:/app/static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s

  vegeta:
    image: peterevans/vegeta
    container_name: wb-vegeta
    networks:
      - wb
    entrypoint: ["/bin/sh", "-c", "while true; do sleep 30; done;"]
    # Вы можете использовать 'docker exec' для запуска Vegeta команд после запуска контейнера
    healthcheck:
      test: ["CMD-SHELL", "echo PING | nc -w 1 localhost 8080 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  wrk:
    image: williamyeh/wrk
    container_name: wb-wrk
    networks:
      - wb
    entrypoint: ["/bin/sh", "-c", "while true; do sleep 30; done;"]
    # Вы можете использовать 'docker exec' для запуска WRK команд после запуска контейнера
    healthcheck:
      test: ["CMD-SHELL", "echo PING | nc -w 1 localhost 8080 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:

networks:
  wb:
    driver: bridge
